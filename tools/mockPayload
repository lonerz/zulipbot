#!/usr/bin/env node
 //
//                          88  88               88                                                                      88
//                          88  ""               88                         ,d           ,d                              88
//                          88                   88                         88           88                              88
//  888888888  88       88  88  88  8b,dPPYba,   88,dPPYba,    ,adPPYba,  MM88MMM      MM88MMM  ,adPPYba,    ,adPPYba,   88  ,adPPYba,
//       a8P"  88       88  88  88  88P"    "8a  88P"    "8a  a8"     "8a   88           88    a8"     "8a  a8"     "8a  88  I8[    ""
//    ,d8P"    88       88  88  88  88       d8  88       d8  8b       d8   88           88    8b       d8  8b       d8  88   `"Y8ba,
//  ,d8"       "8a,   ,a88  88  88  88b,   ,a8"  88b,   ,a8"  "8a,   ,a8"   88,          88,   "8a,   ,a8"  "8a,   ,a8"  88  aa    ]8I
//  888888888   `"YbbdP"Y8  88  88  88`YbbdP""   8Y"Ybbd8""    `"YbbdP""    "Y888        "Y888  `"YbbdP""    `"YbbdP""   88  `"YbbdP""
//                                  88
//                                  88
//
//  .88b  d88.  .d88b.   .o88b. db   dD d8888b.  .d8b.  db    db db       .d88b.   .d8b.  d8888b.
//  88"YbdP`88 .8P  Y8. d8P  Y8 88 ,8P" 88  `8D d8" `8b `8b  d8" 88      .8P  Y8. d8" `8b 88  `8D
//  88  88  88 88    88 8P      88,8P   88oodD" 88ooo88  `8bd8"  88      88    88 88ooo88 88   88
//  88  88  88 88    88 8b      88`8b   88~~~   88~~~88    88    88      88    88 88~~~88 88   88
//  88  88  88 `8b  d8" Y8b  d8 88 `88. 88      88   88    88    88booo. `8b  d8" 88   88 88  .8D
//  YP  YP  YP  `Y88P"   `Y88P" YP   YD 88      YP   YP    YP    Y88888P  `Y88P"  YP   YP Y8888D"

const inquirer = require("inquirer");
const github = require("../src/github.js");
const cfg = require("../src/config.js");
const addLabels = require("../src/issues/addLabels.js");
const claimIssue = require("../src/issues/claimIssue.js");
const abandonIssue = require("../src/issues/abandonIssue.js");
const removeLabels = require("../src/issues/removeLabels.js");
const issueAreaLabeled = require("../src/issues/issueAreaLabeled.js");
const issueReferenced = require("../src/pullRequests/issueReferenced.js");
const checkPullRequestComment = require("../src/issues/checkPullRequestComment.js");
const travisBuildStatus = require("../src/pullRequests/travisBuildStatus.js");

console.log("                       _    ____             _                 _ \r\n  _ __ ___   ___   ___| | _|  _ \\ __ _ _   _| | ___   __ _  __| |\r\n | \"_ ` _ \\ \/ _ \\ \/ __| |\/ | |_) \/ _` | | | | |\/ _ \\ \/ _` |\/ _` |\r\n | | | | | | (_) | (__|   <|  __| (_| | |_| | | (_) | (_| | (_| |\r\n |_| |_| |_|\\___\/ \\___|_|\\_|_|   \\__,_|\\__, |_|\\___\/ \\__,_|\\__,_|\r\n                                       |___\/                     ");
console.log("Hello, welcome to mockPayload!");
console.log("~ Send test payloads to your repository in zulipbot-testing ~\n");
inquirer.prompt({
  type: "input",
  name: "username",
  message: "What's your GitHub username?"
}).then((response) => {
  const username = response.username;
  github.repos.get({
    owner: "zulipbot-testing",
    repo: username
  })
  .then(() => {
    inquirer.prompt([{
      type: "list",
      name: "payload",
      message: "What's your payload type?",
      choices: [
        "Issue",
        "Pull request"
      ]
    },
    {
      type: "input",
      name: "number",
      message: "What's the number of the issue/pull request that @zulipbot-test should respond to?",
      validate: function(value) {
        var valid = /^\d+$/.test(value);
        return valid || "Please enter a valid number!";
      }
    }]).then((response) => {
      const issueNumber = response.number;
      const payloadType = response.payload;
      github.issues.get({
        owner: "zulipbot-testing",
        repo: username,
        number: issueNumber
      }).then(() => {
        github.pullRequests.get({
          owner: "zulipbot-testing",
          repo: username,
          number: issueNumber
        }).then(() => {
          if (payloadType === "Pull request") {
            inquirer.prompt([{
              type: "list",
              name: "payloadType",
              message: "What type of payload do you want to mock?",
              choices: [
                "Pull request opened (pull_request)",
                "Pull request comment created (issue_comment)",
                "Pull request review submitted (pull_request_review)",
                "Pull request review comment created (pull_request_review_comment)",
                "Pull request Travis build status updated (Travis webhook)"
              ]
            },
            {
              type: "input",
              name: "body",
              message: "Enter the payload's body:",
              when: function(answers) {
                return answers.payloadType !== "Pull request Travis build status updated (Travis webhook)";
              }
            },
            {
              type: "list",
              name: "travis",
              message: "What was the Travis build status for the pull request?",
              choices: [
                "passed",
                "failed",
                "errored"
              ],
              when: function(answers) {
                return answers.payloadType === "Pull request Travis build status updated (Travis webhook)"
              }
            },
            {
              type: "input",
              name: "buildURL",
              message: "Enter the URL of the Travis build logs for the pull request:",
              validate: function(value) {
                var valid = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)/.test(value);
                return valid || "Please enter a valid URL!";
              },
              when: function(answers) {
                return answers.payloadType === "Pull request Travis build status updated (Travis webhook)";
              }
            }]).then((response) => {
              const body = response.body;
              const travis = response.travis;
              const buildURL = response.buildURL;
              if (body && body.match(/#([0-9]+)/)) {
                issueReferenced(body, issueNumber, username, "zulipbot-testing");
                console.log(`Payload sent! Check https://github.com/zulipbot-testing/${username}/pull/${issueNumber} for any responses.`);
              } else if (travis && buildURL) {
                travisBuildStatus(travis, "zulipbot-testing", username, issueNumber, buildURL);
                console.log(`Payload sent! Check https://github.com/zulipbot-testing/${username}/pull/${issueNumber} for any responses.`);
              } else {
                console.log("The payload body that you entered did not trigger any functions; please try again!");
              }
            });
          } else {
            console.log("That was an invalid issue number; it was an pull request number! Please select the 'Pull request' option next time.");
          }
        }, () => {
          if (payloadType === "Issue") {
            inquirer.prompt([{
              type: "list",
              name: "payloadType",
              message: "What type of payload do you want to mock?",
              choices: [
                "Issue opened (issues)",
                "Issue comment created (issue_comment)",
                "Issue labeled (issues)"
              ]
            },
            {
              type: "input",
              name: "body",
              message: "Enter the payload's body:",
              when: function(answers) {
                return answers.payloadType !== "Issue labeled (issues)";
              }
            },
            {
              type: "input",
              name: "addedLabel",
              message: "Enter the name of the added label:",
              when: function(answers) {
                return answers.payloadType === "Issue labeled (issues)";
              }
            },
            {
              type: "input",
              name: "commenter",
              message: "What's the username of the user that is triggering this issue payload?",
              when: function(answers) {
                return answers.payloadType !== "Issue labeled (issues)";
              }
            },
            {
              type: "input",
              name: "issueCreator",
              message: "Who opened or created the issue?",
              when: function(answers) {
                return answers.payloadType !== "Issue labeled (issues)";
              }
            },
            {
              type: "input",
              name: "labels",
              message: "Enter any labels the issue has within double quotes (\"\"):",
              when: function(answers) {
                return answers.payloadType !== "Issue labeled (issues)";
              }
            }]).then((response) => {
              const body = response.body;
              const commenter = response.commenter;
              const issueCreator = response.issueCreator;
              const addedLabel = response.addedLabel;
              let issueLabelArray = [];
              if (response.labels) {
                response.labels.match(/"(.*?)"/g).forEach((label) => {
                  issueLabelArray.push({name: label.replace(/"/g, "")});
                });
              }
              if (commenter === cfg.username) return;
              if (addedLabel) {
                issueAreaLabeled(addedLabel, issueNumber, username, "zulipbot-testing", issueLabelArray); // check if issue labeled with area label
              }
              if (!body) return; // if body is empty
              const command = body.match(/@zulipbot\s(\w*)/, "");
              if (!command) return; // if there is no command
              if (body.match(/#([0-9]+)/)) {
                checkPullRequestComment(body, issueNumber, username, "zulipbot-testing"); // check if comment is from PR
              }
              if (body.includes(`\`${command[0]}\``) || body.includes(`\`\`\`\r\n${command[0]}\r\n\`\`\``) || !body.match("@zulipbot " + command[1])) return;
              switch (command[1]) {
                case "claim":
                  claimIssue(commenter, issueNumber, username, "zulipbot-testing"); // check body content for "@zulipbot claim"
                  break;
                case "label":
                  if (commenter === issueCreator) {
                    addLabels(body, issueNumber, username, "zulipbot-testing", issueLabelArray); // check body content for "@zulipbot label" and ensure commenter opened the issue
                  }
                  break;
                case "abandon":
                  abandonIssue(commenter, issueNumber, username, "zulipbot-testing"); // check body content for "@zulipbot abandon"
                  break;
                case "remove":
                  if (commenter === issueCreator) {
                    removeLabels(body, issueNumber, username, "zulipbot-testing", issueLabelArray); // check body content for "@zulipbot remove" and ensure commenter opened the issue
                  }
                  break;
                default:
                  break;
              }
              console.log(`Payload sent! Check https://github.com/zulipbot-testing/${username}/issues/${issueNumber} for any responses.\nIf you received no notifications, then your payload body didn't trigger any functions.`);
            });
          } else {
            console.log("That was an invalid pull request number; it was an issue number! Please select the 'Issue' option next time.");
          }
        });
      }, () => {
        console.log("That was an invalid issue/pull request number! Please enter create an issue/pull request in your repository with the same number and try again.");
      });
    });
  }, () => {
    console.log("You don't have a repository on zulipbot-testing yet! Please make one before running this tool again.");
  });
});
